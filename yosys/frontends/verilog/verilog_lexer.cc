#line 2 "frontends/verilog/verilog_lexer.cc"

#line 4 "frontends/verilog/verilog_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer frontend_verilog_yy_create_buffer
#define yy_delete_buffer frontend_verilog_yy_delete_buffer
#define yy_flex_debug frontend_verilog_yy_flex_debug
#define yy_init_buffer frontend_verilog_yy_init_buffer
#define yy_flush_buffer frontend_verilog_yy_flush_buffer
#define yy_load_buffer_state frontend_verilog_yy_load_buffer_state
#define yy_switch_to_buffer frontend_verilog_yy_switch_to_buffer
#define yyin frontend_verilog_yyin
#define yyleng frontend_verilog_yyleng
#define yylex frontend_verilog_yylex
#define yylineno frontend_verilog_yylineno
#define yyout frontend_verilog_yyout
#define yyrestart frontend_verilog_yyrestart
#define yytext frontend_verilog_yytext
#define yywrap frontend_verilog_yywrap
#define yyalloc frontend_verilog_yyalloc
#define yyrealloc frontend_verilog_yyrealloc
#define yyfree frontend_verilog_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE frontend_verilog_yyrestart(frontend_verilog_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t frontend_verilog_yyleng;

extern FILE *frontend_verilog_yyin, *frontend_verilog_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE frontend_verilog_yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-frontend_verilog_yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < frontend_verilog_yyleng; ++yyl )\
                    if ( frontend_verilog_yytext[yyl] == '\n' )\
                        --frontend_verilog_yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --frontend_verilog_yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up frontend_verilog_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up frontend_verilog_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via frontend_verilog_yyrestart()), so that the user can continue scanning by
	 * just pointing frontend_verilog_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when frontend_verilog_yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t frontend_verilog_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow frontend_verilog_yywrap()'s to do buffer switches
 * instead of setting up a fresh frontend_verilog_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void frontend_verilog_yyrestart (FILE *input_file  );
void frontend_verilog_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE frontend_verilog_yy_create_buffer (FILE *file,int size  );
void frontend_verilog_yy_delete_buffer (YY_BUFFER_STATE b  );
void frontend_verilog_yy_flush_buffer (YY_BUFFER_STATE b  );
void frontend_verilog_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void frontend_verilog_yypop_buffer_state (void );

static void frontend_verilog_yyensure_buffer_stack (void );
static void frontend_verilog_yy_load_buffer_state (void );
static void frontend_verilog_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER frontend_verilog_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE frontend_verilog_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE frontend_verilog_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE frontend_verilog_yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *frontend_verilog_yyalloc (yy_size_t  );
void *frontend_verilog_yyrealloc (void *,yy_size_t  );
void frontend_verilog_yyfree (void *  );

#define yy_new_buffer frontend_verilog_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        frontend_verilog_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        frontend_verilog_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define frontend_verilog_yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *frontend_verilog_yyin = (FILE *) 0, *frontend_verilog_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int frontend_verilog_yylineno;

int frontend_verilog_yylineno = 1;

extern char *frontend_verilog_yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr frontend_verilog_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up frontend_verilog_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	frontend_verilog_yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[652] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  125,  123,  117,  117,  117,  123,   63,  123,
       73,  123,  123,  123,  123,  123,  123,  123,   59,  123,
      123,  123,  123,   73,  123,  123,  123,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,  123,  123,  123,  114,  115,
      114,   66,  124,   65,   66,   75,   76,   75,   75,   81,
       81,   81,   81,   87,   85,   85,   84,   86,    0,    0,
       97,    0,  122,  120,   73,   73,   73,   73,   73,   73,
       73,   73,   95,    0,    0,   89,   90,   93,   92,  111,

      112,  113,  119,    0,   59,    0,   59,  110,  106,   98,
       96,   99,  107,   88,  118,  105,    9,    9,    9,    9,
        9,    9,    9,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   26,   73,   73,   73,
       73,   73,   73,   73,   31,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   91,   94,  102,
      104,  103,  116,   64,    0,    0,    0,   82,    0,    0,
       84,  101,  122,    0,  120,   73,   73,   73,   73,   73,
       73,   73,   73,   73,    0,   60,    0,    0,  119,   61,
        0,   62,  108,  100,  109,    9,    9,    9,    9,    9,

        9,    9,   73,   67,   73,   73,   49,   67,   73,   73,
       73,   25,   28,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   67,   73,   73,   73,   73,
       73,   73,   54,   73,   73,   73,   73,   73,   73,   73,
       73,    0,    0,    0,    0,    0,    0,  121,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,    0,   61,
        0,    9,    9,    9,    9,    9,    9,   73,   73,   73,
       73,   73,   73,   32,   73,   73,   27,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   58,   73,   73,   73,   73,   14,   73,   53,    0,
        0,    0,    0,    0,  121,   73,   73,   73,   73,   73,
       70,   73,   73,   73,    0,    0,   61,    9,    9,    9,
        9,    9,    9,   73,   73,   73,   73,   24,   73,   33,
       34,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   52,   50,   73,   73,   48,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   39,    0,    0,    0,    0,    0,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,    0,    0,    9,
        9,    9,    9,    0,    9,   22,   44,   21,   45,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   57,
       73,   73,   73,   73,   10,   73,   51,   73,   73,   73,
       73,   40,   73,   56,   73,    0,    0,    0,    0,    0,
       73,   73,   73,   73,   73,   73,   71,   73,    0,    0,
        9,    9,    9,    9,    9,    0,    9,   73,   36,   73,
       35,   73,   73,   73,   73,   15,   73,   73,    0,   23,
       55,   73,   30,   16,   73,   29,   73,   73,   68,   69,
        0,    0,    0,    0,    0,   73,   73,   73,    0,    0,
        9,    9,    9,    9,    9,    9,    0,    9,   73,   73,
       73,   20,   73,   73,   73,   73,   12,   37,    0,   73,

       73,   47,   46,    0,    0,    0,    0,    0,    0,   72,
        0,    0,    9,    9,    9,    9,    9,    9,    0,    9,
       73,   42,   73,   73,   73,   11,   73,    0,   73,   18,
        0,    0,    0,    0,   79,    0,    0,    0,    9,    9,
        9,    9,    0,    2,    9,    9,    0,    9,   73,   73,
       73,   73,   17,    0,   19,    0,    0,    0,    0,   78,
        0,    6,    9,    9,    9,    1,    0,    0,   41,   73,
       13,   38,    0,    0,    0,    0,    0,    6,    6,    9,
        9,    9,    1,    0,    3,    0,    0,    0,   43,    0,
        0,    0,    0,    0,    9,    9,    9,    0,    5,    0,

        0,    0,   80,    0,    9,    7,    9,    5,    5,    0,
        0,    0,    9,    7,    7,    4,    0,    0,    0,    9,
        4,    0,    0,    0,    0,    0,    0,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   83,    0,    0,    0,    0,    0,    0,   77,   74,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,    1,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   28,
       33,   34,   35,   33,   33,   33,   33,   33,   34,   36,
       33,   33,   33,   33,   33,   33,   33,   28,   33,   28,
        1,   37,    1,   38,   39,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   33,   50,   51,   52,   53,
       54,   55,   33,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    1,    6,    1,
        1,    1,    1,    1,    1,    1,    7,    8,    9,    9,
        9,    1,    1,    1,    1,    1,   10,   11,   11,   11,
       11,   11,    6,    6,    6,    6,    1,    1,   11,    1,
       11,   11,   11,   11,   11,   11,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,   11,    6,   11,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[678] =
    {   0,
        0,    0,   66,   67,   68,   69,   70,   71,   76,   79,
      134,    0, 1345, 1346,   81, 1346, 1346, 1319, 1346,   79,
       57, 1333,  174, 1328,  193, 1319, 1318,   73,  218, 1317,
       53, 1313,   69,    0,   93, 1269,  166,   51,   68, 1295,
     1290,   68,   53, 1289,   77, 1279, 1278,   79,  171,  178,
     1286,  155, 1289,  177,  187, 1315, 1262,  205, 1346, 1346,
     1309, 1346, 1346, 1346,    0, 1346, 1346, 1312,  196, 1346,
     1307, 1265, 1282, 1346, 1346, 1346,    0, 1346,  243,  222,
     1297,  253,    0,  248,    0,  187, 1272, 1266,  203, 1270,
     1265, 1261, 1346,  278,  255, 1346, 1346, 1346, 1346, 1346,

     1346,  257,    0,  271,  291,  285,  296, 1346, 1292, 1346,
     1290, 1346, 1288,  274, 1346, 1346,    0, 1268, 1267, 1258,
     1261, 1260, 1259, 1246, 1262, 1248, 1257, 1245, 1256, 1244,
     1254, 1242, 1254, 1241, 1243, 1242,    0, 1239,  271,   85,
     1249, 1239, 1244,  263,    0, 1232,  232, 1232, 1234,  290,
     1240, 1231, 1228, 1235, 1227, 1228, 1225, 1346, 1346, 1346,
     1346, 1346, 1346, 1346,  293, 1231, 1230, 1346, 1227, 1221,
        0, 1346,    0,  313,  323, 1219, 1223, 1221, 1220, 1225,
      292, 1219, 1213, 1220,  349,  353,  358, 1205,    0,  345,
      348,  352, 1346, 1346, 1346,    0, 1216, 1220, 1221, 1213,

     1210, 1210, 1220,    0,  329, 1211,    0, 1210, 1213,  320,
     1212,  346,    0, 1213,  262, 1201, 1196, 1194, 1193, 1206,
     1209, 1200, 1189, 1203, 1201, 1196, 1189, 1193, 1201, 1196,
     1185, 1188,    0, 1193, 1179, 1183, 1180, 1184, 1182, 1187,
     1175,  374, 1167, 1178, 1175, 1176, 1185,  361, 1170, 1169,
     1174, 1173, 1168, 1165, 1165, 1173, 1168, 1158, 1162,  375,
      390, 1163, 1172, 1169, 1166, 1165, 1164, 1145, 1151, 1159,
     1153, 1151, 1157,  321, 1143, 1160,    0, 1159, 1140, 1153,
     1143, 1155, 1154, 1136, 1137, 1151, 1135, 1141, 1131, 1130,
     1140, 1135, 1142, 1133, 1139, 1136, 1122, 1139, 1127, 1134,

     1132,    0, 1135, 1119, 1129, 1122,    0, 1127,    0, 1118,
     1125, 1124, 1129, 1116,  397, 1115,  367, 1108, 1106, 1118,
        0, 1120, 1114, 1115,  345,  403,  413, 1115, 1099, 1112,
     1117,  423, 1098, 1097, 1095, 1099, 1106,    0,  319,    0,
        0, 1099, 1093, 1091, 1094, 1093, 1101, 1101, 1086, 1093,
     1100, 1084, 1081, 1097,    0,    0, 1092, 1081,    0, 1090,
     1087,  418, 1075, 1085, 1086, 1083, 1073, 1070, 1078, 1082,
     1062,    0,  372, 1085,  438, 1080, 1071, 1080, 1069, 1070,
      366, 1077, 1069, 1062, 1071, 1069, 1060, 1057, 1063, 1065,
     1058, 1057,  386,  442, 1064, 1067,    0,    0,    0, 1047,

     1063, 1058, 1059, 1056, 1041, 1049, 1048, 1043, 1038,    0,
      446, 1044, 1038, 1052,    0, 1047,    0, 1046, 1032, 1044,
     1030,    0, 1044,    0,  426, 1031, 1037, 1029, 1042, 1037,
     1018, 1029, 1028, 1032, 1021, 1020,    0, 1030, 1017, 1028,
     1026, 1013, 1019, 1015,  190,  451, 1027,  411,    0, 1015,
        0, 1008, 1009, 1013, 1022,    0, 1009, 1016,  456,    0,
        0, 1004,    0,    0, 1014,    0,  995,  999,    0,    0,
      999, 1010,  343,  997, 1002, 1007,  994, 1006,  986,  991,
      998, 1007,  998,  980,  982,  969,  462,  964,  951,  958,
      953,    0,  933,  935,  927,  924,    0,    0,  930,  908,

      873,    0,    0,  865,  870,  862,  859,  867,  871,    0,
      852,  851,  846,  840,  847,  845,  469,  837,    0,  838,
      827,    0,  819,  822,  808,    0,  817,  825,  808,    0,
      802,  802,  845,  797, 1346,  800,  536,  785,  794,  792,
      678,  666,  716, 1346,    0,  713,  710,  463,  674,  672,
      661,  667,    0,  676,    0,  537,  653,  704,  667,  538,
      651,  596,  648,  656,  645,    0,  541,  545,    0,  655,
        0,    0,  278,  663,  646,  644,  659,    0,    0,  641,
      645,  644,    0,  546, 1346,  693,  549,  553,    0,  557,
      665,  653,  648,  639,  627,  644,  644,  561,  562,  667,

      677,  630, 1346,  624,  625,  721,  662,  563,  567,  607,
      542,  542,  547,    0,    0,    0,  538,  539,  548,  568,
        0,  545,  535,  499,  572,  487,  408,  410,  573,  386,
      341,  331,  305,  310,  273,  265,  201,  187,  578,  168,
      167,  582,  671,  672,  673,  108,  677,   67, 1346, 1346,
     1346,  789,  800,  811,  822,  829,  835,  846,  852,  863,
      869,  875,  885,  896,  902,  913,  924,  935,  946,  957,
      968,  979,  990, 1001, 1012, 1023, 1034
    } ;

static yyconst flex_int16_t yy_def[678] =
    {   0,
      651,    1,  652,  652,  653,  653,  654,  654,  655,  655,
      651,   11,  651,  651,  651,  651,  651,  651,  651,  656,
      657,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  657,  658,  651,  659,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  660,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  661,  651,  651,  651,
      651,  656,  662,  651,  657,  657,  657,  657,  657,  657,
      657,  657,  651,  663,  651,  651,  651,  651,  651,  651,

      651,  651,  664,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  658,  651,  651,  665,  665,  665,  665,
      665,  665,  665,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      661,  651,  662,  651,  651,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  663,  663,  651,  651,  664,  651,
      651,  651,  651,  651,  651,  665,  665,  665,  665,  665,

      665,  665,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  651,  651,  651,  651,  651,  651,  651,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  651,  651,
      651,  665,  665,  665,  665,  665,  665,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  651,
      651,  651,  651,  651,  651,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  651,  651,  651,  665,  665,  665,
      665,  665,  665,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  651,  651,  651,  651,  651,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  651,  651,  665,
      665,  665,  665,  666,  665,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  651,  651,  651,  651,  651,
      657,  657,  657,  657,  657,  657,  657,  657,  651,  651,
      665,  665,  665,  665,  665,  666,  665,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  651,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      651,  651,  651,  651,  651,  657,  657,  657,  651,  651,
      665,  665,  665,  665,  665,  665,  651,  665,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  651,  657,

      657,  657,  657,  651,  651,  651,  651,  651,  651,  657,
      651,  651,  665,  665,  665,  665,  651,  665,  667,  665,
      657,  657,  657,  657,  657,  657,  657,  651,  657,  657,
      651,  651,  668,  651,  651,  651,  651,  651,  665,  665,
      665,  665,  668,  651,  517,  665,  667,  665,  657,  657,
      657,  657,  657,  651,  657,  651,  651,  651,  651,  651,
      651,  651,  665,  665,  665,  669,  670,  671,  657,  657,
      657,  657,  651,  651,  651,  651,  651,  672,  562,  665,
      665,  665,  669,  670,  651,  673,  670,  671,  657,  651,
      651,  651,  651,  651,  665,  665,  665,  651,  674,  651,

      651,  651,  651,  651,  665,  651,  665,  674,  674,  651,
      651,  651,  665,  675,  606,  676,  651,  651,  651,  665,
      676,  651,  651,  651,  677,  651,  651,  651,  677,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
        0,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651
    } ;

static yyconst flex_uint16_t yy_nxt[1415] =
    {   0,
       14,   15,   16,   17,   15,   18,   19,   20,   21,   22,
       23,   24,   14,   25,   26,   27,   14,   28,   29,   29,
       29,   30,   14,   31,   32,   33,   14,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   36,   34,   37,
       38,   39,   40,   41,   42,   43,   44,   34,   45,   34,
       46,   47,   48,   49,   50,   51,   52,   53,   34,   34,
       54,   55,   34,   34,   56,   57,   14,   58,   60,   60,
       63,   63,   67,   67,   64,   64,  109,  110,   63,   61,
       61,   63,   79,   82,  650,   79,  102,   68,   68,   71,
      103,   80,   71,  112,  113,  115,  115,   84,   84,   84,

       86,  124,   87,  125,   65,   65,  134,  126,   88,   69,
       69,  135,  127,   89,   90,   91,  128,   92,  132,  142,
      133,   72,  137,  143,   72,  649,  129,  221,  138,  139,
       73,  222,  144,   73,   74,   75,   76,   75,   75,   74,
       74,   74,   77,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   78,   74,   74,   74,
       74,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       74,   74,   77,   74,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   74,   74,

       74,   74,   94,  151,   94,   97,   98,   94,  118,  119,
      120,  121,  644,  152,  160,   94,  122,   94,  147,   79,
      643,   94,   79,  123,  154,  155,  145,   94,   80,  146,
       95,  148,  641,  149,  104,  176,  105,  105,  105,  156,
      157,  166,  161,  485,   79,  177,  167,   79,  486,  106,
       94,  180,   94,   80,  640,   94,  107,   82,  187,   99,
      181,  187,  106,   94,  174,   94,  175,  175,  175,   94,
      162,   84,   84,   84,  228,   94,  651,  651,   95,  185,
      185,  185,  185,   94,  590,   94,  175,  229,   94,  190,
      190,  190,   79,  591,  242,   79,   94,  242,   94,  191,

      191,   80,   94,  192,  192,  192,  285,  104,   94,  105,
      105,  105,  104,  188,  107,  107,  107,  639,  204,  217,
      226,  286,  106,  192,  218,  219,  638,  106,  220,  107,
      232,  248,  248,  248,  107,  106,  233,  204,  204,  174,
      106,  175,  175,  175,  234,  254,  235,  255,  637,  243,
      185,  185,  185,  185,  651,  651,  651,  651,  636,  187,
      275,  175,  187,  260,  260,  260,  192,  192,  192,  635,
      192,  192,  192,  269,  276,  242,  261,  270,  242,  315,
      315,  315,  340,  260,  341,  634,  192,  271,  278,  261,
      192,  279,  280,  260,  260,  260,  506,  281,  388,  315,

      282,  507,  389,  283,  326,  326,  261,  379,  327,  327,
      327,  434,  380,  260,  188,  315,  315,  315,  321,  261,
      381,  327,  327,  327,  394,  426,  382,  394,  327,  427,
      243,  327,  327,  327,  633,  315,  204,  204,  444,  394,
      445,  327,  394,  394,  469,  470,  394,  459,  459,  459,
      459,  327,  487,  489,  632,  487,  490,  459,  459,  459,
      459,  491,  499,  487,  568,  631,  487,  568,  519,  543,
      543,  544,  543,  543,  543,  543,  543,  545,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  545,  545,  545,
      543,  543,  543,  543,  543,  543,  545,  545,  545,  545,

      545,  545,  545,  545,  545,  543,  543,  545,  543,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  543,  543,  543,  543,  560,  574,  560,
      560,  574,  560,  585,  630,  586,  568,  587,  585,  568,
      586,  585,  587,  586,  598,  587,  628,  598,  600,  600,
      600,  600,  598,  609,  651,  598,  609,  651,  609,  625,
      599,  609,  625,  625,  651,  627,  625,  651,  599,  642,
      642,  642,  642,  642,  642,  642,  642,  626,  624,  623,
      622,  620,  619,  561,  575,  561,  578,  578,  618,  578,

      578,  578,  578,  578,  579,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  579,  579,  579,  578,  578,  578,
      578,  578,  578,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  578,  578,  579,  578,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      578,  578,  578,  578,  574,  617,  616,  574,  600,  600,
      600,  600,  645,  647,  645,  645,  647,  645,  647,  613,
      612,  647,  611,  590,  646,  648,  646,  607,  606,  605,
      648,  604,  603,  602,  601,  585,  597,  596,  595,  594,

      593,  592,  589,  582,  581,  580,  577,  576,  566,  556,
      573,  572,  610,  571,  570,  569,  567,  566,  544,  565,
      575,  614,  614,  564,  614,  614,  614,  614,  614,  615,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  615,
      615,  615,  614,  614,  614,  614,  614,  614,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  614,  614,  615,
      614,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  614,  614,  614,  614,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   83,   83,   83,  563,   83,  562,   83,
       85,  537,  559,   85,  558,   85,  114,  544,  114,  114,
      557,  114,  114,  114,  114,  114,  114,  117,  556,  555,
      554,  553,  117,  164,  164,  552,  164,  164,  164,  164,
      164,  164,  164,  164,  171,  551,  550,  171,  549,  171,
      173,  173,  548,  173,  546,  173,  186,  186,  186,  186,
      542,  541,  540,  186,  186,  186,  189,  189,  539,  538,

      189,  189,  189,  189,  189,  189,  189,  196,  537,  536,
      196,  535,  196,  446,  446,  534,  533,  446,  446,  446,
      446,  446,  446,  446,  547,  547,  532,  531,  530,  547,
      547,  547,  547,  547,  547,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  583,  583,  529,  583,
      583,  583,  583,  583,  583,  583,  583,  584,  584,  584,
      528,  584,  584,  584,  584,  584,  584,  584,  588,  588,
      527,  526,  588,  588,  588,  525,  588,  588,  588,  578,
      578,  524,  578,  578,  578,  578,  578,  578,  578,  578,
      586,  586,  586,  523,  586,  586,  586,  586,  586,  586,

      586,  608,  608,  522,  521,  608,  608,  608,  608,  608,
      608,  608,  614,  614,  520,  614,  614,  614,  614,  614,
      614,  614,  614,  621,  621,  518,  621,  621,  621,  621,
      621,  621,  621,  621,  629,  629,  517,  516,  629,  629,
      629,  515,  629,  629,  629,  514,  513,  512,  511,  510,
      321,  321,  509,  508,  505,  504,  503,  502,  501,  500,
      498,  497,  496,  495,  494,  493,  492,  488,  484,  483,
      482,  481,  480,  479,  478,  321,  477,  321,  476,  321,
      321,  475,  474,  473,  472,  471,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  458,  457,  456,  455,  454,

      453,  452,  451,  450,  449,  448,  447,  443,  442,  441,
      440,  439,  438,  321,  437,  436,  321,  435,  433,  432,
      431,  430,  429,  428,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  396,  395,  393,  392,  391,  390,  321,
      387,  386,  385,  384,  383,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,

      343,  342,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  325,  324,  323,  321,  322,  321,
      320,  319,  318,  317,  316,  314,  313,  312,  311,  310,
      204,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  204,  294,  293,  292,
      291,  290,  289,  288,  287,  284,  277,  274,  273,  272,
      268,  267,  266,  265,  264,  263,  262,  259,  258,  257,
      256,  253,  252,  251,  250,  249,  247,  246,  245,  244,
      204,  241,  240,  239,  238,  237,  236,  231,  230,  227,
      225,  224,  223,  216,  215,  214,  213,  212,  211,  210,

      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  195,  194,  193,  184,  183,  182,  179,
      178,  172,  170,  169,  168,  165,  163,  159,  158,  153,
      150,  141,  140,  136,  131,  130,  116,  111,  108,  101,
      100,   96,   93,   81,  651,   13,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651
    } ;

static yyconst flex_int16_t yy_chk[1415] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    6,    7,    8,    5,    6,   31,   31,    9,    3,
        4,   10,   15,   20,  648,   15,   28,    7,    8,    9,
       28,   15,   10,   33,   33,   35,   35,   20,   20,   20,

       21,   38,   21,   38,    5,    6,   43,   38,   21,    7,
        8,   43,   39,   21,   21,   21,   39,   21,   42,   48,
       42,    9,   45,   48,   10,  646,   39,  140,   45,   45,
        9,  140,   48,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   23,   52,   23,   25,   25,   23,   37,   37,
       37,   37,  641,   52,   58,   23,   37,   23,   50,   29,
      640,   23,   29,   37,   54,   54,   49,   23,   29,   49,
       23,   50,  638,   50,   29,   86,   29,   29,   29,   55,
       55,   69,   58,  445,   79,   86,   69,   79,  445,   29,
       80,   89,   80,   79,  637,   80,   29,   82,  102,   25,
       89,  102,   29,   80,   84,   80,   84,   84,   84,   80,
       58,   82,   82,   82,  147,   80,  114,  114,   80,   94,
       94,   94,   94,   95,  573,   95,   84,  147,   95,  104,
      104,  104,  105,  573,  165,  105,   95,  165,   95,  106,

      106,  105,   95,  106,  106,  106,  215,  105,   95,  105,
      105,  105,  107,  102,  107,  107,  107,  636,  144,  139,
      144,  215,  105,  106,  139,  139,  635,  107,  139,  105,
      150,  174,  174,  174,  107,  105,  150,  339,  339,  175,
      107,  175,  175,  175,  150,  181,  150,  181,  634,  165,
      185,  185,  185,  185,  186,  186,  186,  186,  633,  187,
      210,  175,  187,  190,  190,  190,  191,  191,  191,  632,
      192,  192,  192,  205,  210,  242,  190,  205,  242,  248,
      248,  248,  274,  190,  274,  631,  191,  205,  212,  190,
      192,  212,  212,  260,  260,  260,  473,  212,  325,  248,

      212,  473,  325,  212,  261,  261,  260,  317,  261,  261,
      261,  381,  317,  260,  187,  315,  315,  315,  381,  260,
      317,  326,  326,  326,  332,  373,  317,  332,  261,  373,
      242,  327,  327,  327,  630,  315,  362,  362,  393,  375,
      393,  326,  375,  394,  425,  425,  394,  411,  411,  411,
      411,  327,  446,  448,  628,  446,  448,  459,  459,  459,
      459,  448,  459,  487,  548,  627,  487,  548,  487,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  537,  556,  560,
      537,  556,  560,  567,  626,  567,  568,  567,  584,  568,
      584,  587,  584,  587,  588,  587,  624,  588,  590,  590,
      590,  590,  598,  599,  608,  598,  599,  608,  609,  620,
      588,  609,  620,  625,  629,  623,  625,  629,  598,  639,
      639,  639,  639,  642,  642,  642,  642,  622,  619,  618,
      617,  613,  612,  537,  556,  560,  562,  562,  611,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  574,  610,  607,  574,  600,  600,
      600,  600,  643,  644,  645,  643,  644,  645,  647,  605,
      604,  647,  602,  601,  643,  644,  645,  597,  596,  595,
      647,  594,  593,  592,  591,  586,  582,  581,  580,  577,

      576,  575,  570,  565,  564,  563,  561,  559,  558,  557,
      554,  552,  600,  551,  550,  549,  547,  546,  543,  542,
      574,  606,  606,  541,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  656,  656,  656,  540,  656,  539,  656,
      657,  538,  536,  657,  534,  657,  658,  533,  658,  658,
      532,  658,  658,  658,  658,  658,  658,  659,  531,  529,
      528,  527,  659,  660,  660,  525,  660,  660,  660,  660,
      660,  660,  660,  660,  661,  524,  523,  661,  521,  661,
      662,  662,  520,  662,  518,  662,  663,  663,  663,  663,
      516,  515,  514,  663,  663,  663,  664,  664,  513,  512,

      664,  664,  664,  664,  664,  664,  664,  665,  511,  509,
      665,  508,  665,  666,  666,  507,  506,  666,  666,  666,
      666,  666,  666,  666,  667,  667,  505,  504,  501,  667,
      667,  667,  667,  667,  667,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  669,  669,  500,  669,
      669,  669,  669,  669,  669,  669,  669,  670,  670,  670,
      499,  670,  670,  670,  670,  670,  670,  670,  671,  671,
      496,  495,  671,  671,  671,  494,  671,  671,  671,  672,
      672,  493,  672,  672,  672,  672,  672,  672,  672,  672,
      673,  673,  673,  491,  673,  673,  673,  673,  673,  673,

      673,  674,  674,  490,  489,  674,  674,  674,  674,  674,
      674,  674,  675,  675,  488,  675,  675,  675,  675,  675,
      675,  675,  675,  676,  676,  486,  676,  676,  676,  676,
      676,  676,  676,  676,  677,  677,  485,  484,  677,  677,
      677,  483,  677,  677,  677,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  472,  471,  468,  467,  465,  462,
      458,  457,  455,  454,  453,  452,  450,  447,  444,  443,
      442,  441,  440,  439,  438,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  423,  421,  420,  419,
      418,  416,  414,  413,  412,  409,  408,  407,  406,  405,

      404,  403,  402,  401,  400,  396,  395,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  380,  379,
      378,  377,  376,  374,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  361,  360,  358,  357,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      337,  336,  335,  334,  333,  331,  330,  329,  328,  324,
      323,  322,  320,  319,  318,  316,  314,  313,  312,  311,
      310,  308,  306,  305,  304,  303,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,

      276,  275,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  247,  246,  245,  244,  243,
      241,  240,  239,  238,  237,  236,  235,  234,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  214,  211,  209,  208,  206,
      203,  202,  201,  200,  199,  198,  197,  188,  184,  183,
      182,  180,  179,  178,  177,  176,  170,  169,  167,  166,
      157,  156,  155,  154,  153,  152,  151,  149,  148,  146,
      143,  142,  141,  138,  136,  135,  134,  133,  132,  131,

      130,  129,  128,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  113,  111,  109,   92,   91,   90,   88,
       87,   81,   73,   72,   71,   68,   61,   57,   56,   53,
       51,   47,   46,   44,   41,   40,   36,   32,   30,   27,
       26,   24,   22,   18,   13,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[125] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int frontend_verilog_yy_flex_debug;
int frontend_verilog_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *frontend_verilog_yytext;
#line 1 "frontends/verilog/verilog_lexer.l"
/*
 *  yosys -- Yosys Open SYnthesis Suite
 *
 *  Copyright (C) 2012  Clifford Wolf <clifford@clifford.at>
 *
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *  ---
 *
 *  The Verilog frontend.
 *
 *  This frontend is using the AST frontend library (see frontends/ast/).
 *  Thus this frontend does not generate RTLIL code directly but creates an
 *  AST directly from the Verilog parse tree and then passes this AST to
 *  the AST frontend library.
 *
 *  ---
 *
 *  A simple lexer for Verilog code. Non-preprocessor compiler directives are
 *  handled here. The preprocessor stuff is handled in preproc.cc. Everything
 *  else is left to the bison parser (see parser.y).
 *
 */
#line 36 "frontends/verilog/verilog_lexer.l"

#ifdef __clang__
// bison generates code using the 'register' storage class specifier
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif

#include "kernel/log.h"
#include "frontends/verilog/verilog_frontend.h"
#include "frontends/ast/ast.h"
#include "verilog_parser.tab.h"

USING_YOSYS_NAMESPACE
using namespace AST;
using namespace VERILOG_FRONTEND;

YOSYS_NAMESPACE_BEGIN
namespace VERILOG_FRONTEND {
	std::vector<std::string> fn_stack;
	std::vector<int> ln_stack;
}
YOSYS_NAMESPACE_END

#define SV_KEYWORD(_tok) \
	if (sv_mode) return _tok; \
	log("Lexer warning: The SystemVerilog keyword `%s' (at %s:%d) is not "\
			"recognized unless read_verilog is called with -sv!\n", frontend_verilog_yytext, \
			AST::current_filename.c_str(), frontend_verilog_yyget_lineno()); \
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext); \
	return TOK_ID;

#define NON_KEYWORD() \
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext); \
	return TOK_ID;

#define YY_INPUT(buf,result,max_size) \
	result = readsome(*VERILOG_FRONTEND::lexin, buf, max_size)






#line 1130 "frontends/verilog/verilog_lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2
#define SYNOPSYS_TRANSLATE_OFF 3
#define SYNOPSYS_FLAGS 4
#define IMPORT_DPI 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int frontend_verilog_yylex_destroy (void );

int frontend_verilog_yyget_debug (void );

void frontend_verilog_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE frontend_verilog_yyget_extra (void );

void frontend_verilog_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *frontend_verilog_yyget_in (void );

void frontend_verilog_yyset_in  (FILE * _in_str  );

FILE *frontend_verilog_yyget_out (void );

void frontend_verilog_yyset_out  (FILE * _out_str  );

yy_size_t frontend_verilog_yyget_leng (void );

char *frontend_verilog_yyget_text (void );

int frontend_verilog_yyget_lineno (void );

void frontend_verilog_yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int frontend_verilog_yywrap (void );
#else
extern int frontend_verilog_yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( frontend_verilog_yytext, frontend_verilog_yyleng, 1, frontend_verilog_yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( frontend_verilog_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( frontend_verilog_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, frontend_verilog_yyin))==0 && ferror(frontend_verilog_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(frontend_verilog_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int frontend_verilog_yylex (void);

#define YY_DECL int frontend_verilog_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after frontend_verilog_yytext and frontend_verilog_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! frontend_verilog_yyin )
			frontend_verilog_yyin = stdin;

		if ( ! frontend_verilog_yyout )
			frontend_verilog_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			frontend_verilog_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE );
		}

		frontend_verilog_yy_load_buffer_state( );
		}

	{
#line 86 "frontends/verilog/verilog_lexer.l"


#line 1354 "frontends/verilog/verilog_lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of frontend_verilog_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 652 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1346 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = (yy_more_len); yyl < frontend_verilog_yyleng; ++yyl )
				if ( frontend_verilog_yytext[yyl] == '\n' )
					   
    frontend_verilog_yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "frontends/verilog/verilog_lexer.l"
{
	fn_stack.push_back(current_filename);
	ln_stack.push_back(frontend_verilog_yyget_lineno());
	current_filename = frontend_verilog_yytext+11;
	if (!current_filename.empty() && current_filename.front() == '"')
		current_filename = current_filename.substr(1);
	if (!current_filename.empty() && current_filename.back() == '"')
		current_filename = current_filename.substr(0, current_filename.size()-1);
	frontend_verilog_yyset_lineno(0);
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 99 "frontends/verilog/verilog_lexer.l"
{
	current_filename = fn_stack.back();
	fn_stack.pop_back();
	frontend_verilog_yyset_lineno(ln_stack.back());
	ln_stack.pop_back();
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 106 "frontends/verilog/verilog_lexer.l"
{
	char *p = frontend_verilog_yytext + 5;
	while (*p == ' ' || *p == '\t') p++;
	frontend_verilog_yyset_lineno(atoi(p));
	while (*p && *p != ' ' && *p != '\t') p++;
	while (*p == ' ' || *p == '\t') p++;
	char *q = *p ? p + 1 : p;
	while (*q && *q != '"') q++;
	current_filename = std::string(p).substr(1, q-p-1);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "frontends/verilog/verilog_lexer.l"
{
	log_error("Can't open include file `%s'!\n", frontend_verilog_yytext + 15);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 121 "frontends/verilog/verilog_lexer.l"
/* ignore timescale directive */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 123 "frontends/verilog/verilog_lexer.l"
/* ignore `celldefine */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 124 "frontends/verilog/verilog_lexer.l"
/* ignore `endcelldefine */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "frontends/verilog/verilog_lexer.l"
{
	char *p = frontend_verilog_yytext;
	while (*p != 0 && *p != ' ' && *p != '\t') p++;
	while (*p == ' ' || *p == '\t') p++;
	if (!strcmp(p, "none"))
		VERILOG_FRONTEND::default_nettype_wire = false;
	else if (!strcmp(p, "wire"))
		VERILOG_FRONTEND::default_nettype_wire = true;
	else
		frontend_verilog_yyerror("Unsupported default nettype: %s", p);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 138 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yyerror("Unimplemented compiler directive or undefined macro %s.", frontend_verilog_yytext);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 142 "frontends/verilog/verilog_lexer.l"
{ return TOK_MODULE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 143 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDMODULE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 144 "frontends/verilog/verilog_lexer.l"
{ return TOK_FUNCTION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 145 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDFUNCTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 146 "frontends/verilog/verilog_lexer.l"
{ return TOK_TASK; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 147 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDTASK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 148 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_PACKAGE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 149 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ENDPACKAGE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 150 "frontends/verilog/verilog_lexer.l"
{ return TOK_PARAMETER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 151 "frontends/verilog/verilog_lexer.l"
{ return TOK_LOCALPARAM; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 152 "frontends/verilog/verilog_lexer.l"
{ return TOK_DEFPARAM; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 153 "frontends/verilog/verilog_lexer.l"
{ return TOK_ASSIGN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 154 "frontends/verilog/verilog_lexer.l"
{ return TOK_ALWAYS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 155 "frontends/verilog/verilog_lexer.l"
{ return TOK_INITIAL; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 156 "frontends/verilog/verilog_lexer.l"
{ return TOK_BEGIN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 157 "frontends/verilog/verilog_lexer.l"
{ return TOK_END; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 158 "frontends/verilog/verilog_lexer.l"
{ return TOK_IF; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 159 "frontends/verilog/verilog_lexer.l"
{ return TOK_ELSE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 160 "frontends/verilog/verilog_lexer.l"
{ return TOK_FOR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 161 "frontends/verilog/verilog_lexer.l"
{ return TOK_POSEDGE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 162 "frontends/verilog/verilog_lexer.l"
{ return TOK_NEGEDGE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 163 "frontends/verilog/verilog_lexer.l"
{ return TOK_OR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "frontends/verilog/verilog_lexer.l"
{ return TOK_CASE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 165 "frontends/verilog/verilog_lexer.l"
{ return TOK_CASEX; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 166 "frontends/verilog/verilog_lexer.l"
{ return TOK_CASEZ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 167 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDCASE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 168 "frontends/verilog/verilog_lexer.l"
{ return TOK_DEFAULT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 169 "frontends/verilog/verilog_lexer.l"
{ return TOK_GENERATE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 170 "frontends/verilog/verilog_lexer.l"
{ return TOK_ENDGENERATE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 171 "frontends/verilog/verilog_lexer.l"
{ return TOK_WHILE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "frontends/verilog/verilog_lexer.l"
{ return TOK_REPEAT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 174 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 175 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 176 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_ALWAYS); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 178 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_ASSERT; SV_KEYWORD(TOK_ASSERT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 179 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_ASSUME; SV_KEYWORD(TOK_ASSUME); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 180 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_RESTRICT; SV_KEYWORD(TOK_RESTRICT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 181 "frontends/verilog/verilog_lexer.l"
{ if (formal_mode) return TOK_PROPERTY; SV_KEYWORD(TOK_PROPERTY); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 182 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_REG); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 183 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_REG); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 185 "frontends/verilog/verilog_lexer.l"
{ return TOK_INPUT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 186 "frontends/verilog/verilog_lexer.l"
{ return TOK_OUTPUT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 187 "frontends/verilog/verilog_lexer.l"
{ return TOK_INOUT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 188 "frontends/verilog/verilog_lexer.l"
{ return TOK_WIRE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 189 "frontends/verilog/verilog_lexer.l"
{ return TOK_REG; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 190 "frontends/verilog/verilog_lexer.l"
{ return TOK_INTEGER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 191 "frontends/verilog/verilog_lexer.l"
{ return TOK_SIGNED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 192 "frontends/verilog/verilog_lexer.l"
{ return TOK_GENVAR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 193 "frontends/verilog/verilog_lexer.l"
{ return TOK_REAL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_CONST;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 200 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_CONST;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 205 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_REALVAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 210 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_REALVAL;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 215 "frontends/verilog/verilog_lexer.l"
{ BEGIN(STRING); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 216 "frontends/verilog/verilog_lexer.l"
{ yymore(); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 217 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(0);
	char *yystr = strdup(frontend_verilog_yytext);
	yystr[strlen(frontend_verilog_yytext) - 1] = 0;
	int i = 0, j = 0;
	while (yystr[i]) {
		if (yystr[i] == '\\' && yystr[i + 1]) {
			i++;
			if (yystr[i] == 'n')
				yystr[i] = '\n';
			else if (yystr[i] == 't')
				yystr[i] = '\t';
			else if ('0' <= yystr[i] && yystr[i] <= '7') {
				yystr[i] = yystr[i] - '0';
				if ('0' <= yystr[i + 1] && yystr[i + 1] <= '7') {
					yystr[i + 1] = yystr[i] * 8 + yystr[i + 1] - '0';
					i++;
				}
				if ('0' <= yystr[i + 1] && yystr[i + 1] <= '7') {
					yystr[i + 1] = yystr[i] * 8 + yystr[i + 1] - '0';
					i++;
				}
			}
		}
		yystr[j++] = yystr[i++];
	}
	yystr[j] = 0;
	frontend_verilog_yylval.string = new std::string(yystr);
	free(yystr);
	return TOK_STRING;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 248 "frontends/verilog/verilog_lexer.l"
{ yymore(); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 250 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_PRIMITIVE;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 255 "frontends/verilog/verilog_lexer.l"
{ return TOK_SUPPLY0; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 256 "frontends/verilog/verilog_lexer.l"
{ return TOK_SUPPLY1; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 258 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "frontends/verilog/verilog_lexer.l"
{ return TOK_TO_SIGNED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 264 "frontends/verilog/verilog_lexer.l"
{ return TOK_TO_UNSIGNED; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 266 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 271 "frontends/verilog/verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) translate_off' comments.\n"
				"Yosys does support them but it is recommended to use `ifdef constructs instead!\n");
		printed_warning = true;
	}
	BEGIN(SYNOPSYS_TRANSLATE_OFF);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 280 "frontends/verilog/verilog_lexer.l"
/* ignore synopsys translate_off body */
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 281 "frontends/verilog/verilog_lexer.l"
/* ignore synopsys translate_off body */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 282 "frontends/verilog/verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(SYNOPSYS_FLAGS);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 287 "frontends/verilog/verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) full_case' comments.\n"
				"Yosys does support them but it is recommended to use Verilog `full_case' attributes instead!\n");
		printed_warning = true;
	}
	return TOK_SYNOPSYS_FULL_CASE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 296 "frontends/verilog/verilog_lexer.l"
{
	static bool printed_warning = false;
	if (!printed_warning) {
		log_warning("Found one of those horrible `(synopsys|synthesis) parallel_case' comments.\n"
				"Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!\n");
		printed_warning = true;
	}
	return TOK_SYNOPSYS_PARALLEL_CASE;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 305 "frontends/verilog/verilog_lexer.l"
/* ignore everything else */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 306 "frontends/verilog/verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 308 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(IMPORT_DPI);
	return TOK_DPI_FUNCTION;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 313 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(std::string("\\") + frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 318 "frontends/verilog/verilog_lexer.l"
/* ignore whitespaces */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 320 "frontends/verilog/verilog_lexer.l"
{
	BEGIN(0);
	return *frontend_verilog_yytext;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 325 "frontends/verilog/verilog_lexer.l"
{
	return *frontend_verilog_yytext;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 329 "frontends/verilog/verilog_lexer.l"
{
	frontend_verilog_yylval.string = new std::string(frontend_verilog_yytext);
	return TOK_ID;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 334 "frontends/verilog/verilog_lexer.l"
{ return ATTR_BEGIN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 335 "frontends/verilog/verilog_lexer.l"
{ return ATTR_END; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 337 "frontends/verilog/verilog_lexer.l"
{ return DEFATTR_BEGIN; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 338 "frontends/verilog/verilog_lexer.l"
{ return DEFATTR_END; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 340 "frontends/verilog/verilog_lexer.l"
{ return OP_POW; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 341 "frontends/verilog/verilog_lexer.l"
{ return OP_LOR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 342 "frontends/verilog/verilog_lexer.l"
{ return OP_LAND; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 343 "frontends/verilog/verilog_lexer.l"
{ return OP_EQ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 344 "frontends/verilog/verilog_lexer.l"
{ return OP_NE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 345 "frontends/verilog/verilog_lexer.l"
{ return OP_LE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 346 "frontends/verilog/verilog_lexer.l"
{ return OP_GE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 348 "frontends/verilog/verilog_lexer.l"
{ return OP_EQX; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 349 "frontends/verilog/verilog_lexer.l"
{ return OP_NEX; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 351 "frontends/verilog/verilog_lexer.l"
{ return OP_NAND; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 352 "frontends/verilog/verilog_lexer.l"
{ return OP_NOR;  }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 353 "frontends/verilog/verilog_lexer.l"
{ return OP_XNOR; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 354 "frontends/verilog/verilog_lexer.l"
{ return OP_XNOR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 356 "frontends/verilog/verilog_lexer.l"
{ return OP_SHL; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 357 "frontends/verilog/verilog_lexer.l"
{ return OP_SHR; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 358 "frontends/verilog/verilog_lexer.l"
{ return OP_SSHL; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 359 "frontends/verilog/verilog_lexer.l"
{ return OP_SSHR; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 361 "frontends/verilog/verilog_lexer.l"
{ SV_KEYWORD(TOK_PACKAGESEP); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 363 "frontends/verilog/verilog_lexer.l"
{ return TOK_POS_INDEXED; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 364 "frontends/verilog/verilog_lexer.l"
{ return TOK_NEG_INDEXED; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 366 "frontends/verilog/verilog_lexer.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 367 "frontends/verilog/verilog_lexer.l"
/* ignore comment body */
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 368 "frontends/verilog/verilog_lexer.l"
/* ignore comment body */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 369 "frontends/verilog/verilog_lexer.l"
{ BEGIN(0); }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 371 "frontends/verilog/verilog_lexer.l"
/* ignore whitespaces */
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 372 "frontends/verilog/verilog_lexer.l"
/* ignore continuation sequence */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 373 "frontends/verilog/verilog_lexer.l"
/* ignore one-line comments */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 375 "frontends/verilog/verilog_lexer.l"
/* ignore simulation timings */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 376 "frontends/verilog/verilog_lexer.l"
/* ignore simulation timings */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 377 "frontends/verilog/verilog_lexer.l"
/* ignore simulation timings */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 379 "frontends/verilog/verilog_lexer.l"
{ return *frontend_verilog_yytext; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 381 "frontends/verilog/verilog_lexer.l"
ECHO;
	YY_BREAK
#line 2184 "frontends/verilog/verilog_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(SYNOPSYS_TRANSLATE_OFF):
case YY_STATE_EOF(SYNOPSYS_FLAGS):
case YY_STATE_EOF(IMPORT_DPI):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed frontend_verilog_yyin at a new source and called
			 * frontend_verilog_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = frontend_verilog_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( frontend_verilog_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * frontend_verilog_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of frontend_verilog_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					frontend_verilog_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			frontend_verilog_yyrestart(frontend_verilog_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) frontend_verilog_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 652 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 652 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 651);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					frontend_verilog_yyrestart(frontend_verilog_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( frontend_verilog_yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve frontend_verilog_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    frontend_verilog_yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void frontend_verilog_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        frontend_verilog_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            frontend_verilog_yy_create_buffer(frontend_verilog_yyin,YY_BUF_SIZE );
	}

	frontend_verilog_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	frontend_verilog_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void frontend_verilog_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		frontend_verilog_yypop_buffer_state();
	 *		frontend_verilog_yypush_buffer_state(new_buffer);
     */
	frontend_verilog_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	frontend_verilog_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (frontend_verilog_yywrap()) processing, but the only time this flag
	 * is looked at is after frontend_verilog_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void frontend_verilog_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	frontend_verilog_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE frontend_verilog_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) frontend_verilog_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) frontend_verilog_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	frontend_verilog_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with frontend_verilog_yy_create_buffer()
 * 
 */
    void frontend_verilog_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		frontend_verilog_yyfree((void *) b->yy_ch_buf  );

	frontend_verilog_yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a frontend_verilog_yyrestart() or at EOF.
 */
    static void frontend_verilog_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	frontend_verilog_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then frontend_verilog_yy_init_buffer was _probably_
     * called from frontend_verilog_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void frontend_verilog_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		frontend_verilog_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void frontend_verilog_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	frontend_verilog_yyensure_buffer_stack();

	/* This block is copied from frontend_verilog_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from frontend_verilog_yy_switch_to_buffer. */
	frontend_verilog_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void frontend_verilog_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	frontend_verilog_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		frontend_verilog_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void frontend_verilog_yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)frontend_verilog_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)frontend_verilog_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) frontend_verilog_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	frontend_verilog_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to frontend_verilog_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       frontend_verilog_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_string (yyconst char * yystr )
{
    
	return frontend_verilog_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to frontend_verilog_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE frontend_verilog_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) frontend_verilog_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in frontend_verilog_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = frontend_verilog_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in frontend_verilog_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up frontend_verilog_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		frontend_verilog_yytext[frontend_verilog_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = frontend_verilog_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		frontend_verilog_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int frontend_verilog_yyget_lineno  (void)
{
        
    return frontend_verilog_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *frontend_verilog_yyget_in  (void)
{
        return frontend_verilog_yyin;
}

/** Get the output stream.
 * 
 */
FILE *frontend_verilog_yyget_out  (void)
{
        return frontend_verilog_yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t frontend_verilog_yyget_leng  (void)
{
        return frontend_verilog_yyleng;
}

/** Get the current token.
 * 
 */

char *frontend_verilog_yyget_text  (void)
{
        return frontend_verilog_yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void frontend_verilog_yyset_lineno (int  _line_number )
{
    
    frontend_verilog_yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see frontend_verilog_yy_switch_to_buffer
 */
void frontend_verilog_yyset_in (FILE *  _in_str )
{
        frontend_verilog_yyin = _in_str ;
}

void frontend_verilog_yyset_out (FILE *  _out_str )
{
        frontend_verilog_yyout = _out_str ;
}

int frontend_verilog_yyget_debug  (void)
{
        return frontend_verilog_yy_flex_debug;
}

void frontend_verilog_yyset_debug (int  _bdebug )
{
        frontend_verilog_yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from frontend_verilog_yylex_destroy(), so don't allocate here.
     */

    /* We do not touch frontend_verilog_yylineno unless the option is enabled. */
    frontend_verilog_yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    frontend_verilog_yyin = stdin;
    frontend_verilog_yyout = stdout;
#else
    frontend_verilog_yyin = (FILE *) 0;
    frontend_verilog_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * frontend_verilog_yylex_init()
     */
    return 0;
}

/* frontend_verilog_yylex_destroy is for both reentrant and non-reentrant scanners. */
int frontend_verilog_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		frontend_verilog_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		frontend_verilog_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	frontend_verilog_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * frontend_verilog_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *frontend_verilog_yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *frontend_verilog_yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void frontend_verilog_yyfree (void * ptr )
{
			free( (char *) ptr );	/* see frontend_verilog_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 381 "frontends/verilog/verilog_lexer.l"



// this is a hack to avoid the 'yyinput defined but not used' error msgs
void *frontend_verilog_avoid_input_warnings() {
	return (void*)&yyinput;
}


