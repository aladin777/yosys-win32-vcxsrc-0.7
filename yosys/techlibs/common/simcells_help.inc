cell_help["$_BUF_"] = "\n"
"    $_BUF_ (A, Y)\n"
"\n"
"A buffer. This cell type is always optimized away by the opt_clean pass.\n"
"\n"
"Truth table:    A | Y\n"
"               ---+---\n"
"                0 | 0\n"
"                1 | 1\n"
"\n";
cell_code["$_BUF_+"] = "module \\$_BUF_ (A, Y);\n"
"    input A;\n"
"    output Y;\n"
"    assign Y = A;\n"
"endmodule\n";
cell_help["$_NOT_"] = "\n"
"    $_NOT_ (A, Y)\n"
"\n"
"An inverter gate.\n"
"\n"
"Truth table:    A | Y\n"
"               ---+---\n"
"                0 | 1\n"
"                1 | 0\n"
"\n";
cell_code["$_NOT_+"] = "module \\$_NOT_ (A, Y);\n"
"    input A;\n"
"    output Y;\n"
"    assign Y = ~A;\n"
"endmodule\n";
cell_help["$_AND_"] = "\n"
"    $_AND_ (A, B, Y)\n"
"\n"
"A 2-input AND gate.\n"
"\n"
"Truth table:    A B | Y\n"
"               -----+---\n"
"                0 0 | 0\n"
"                0 1 | 0\n"
"                1 0 | 0\n"
"                1 1 | 1\n"
"\n";
cell_code["$_AND_+"] = "module \\$_AND_ (A, B, Y);\n"
"    input A, B;\n"
"    output Y;\n"
"    assign Y = A & B;\n"
"endmodule\n";
cell_help["$_NAND_"] = "\n"
"    $_NAND_ (A, B, Y)\n"
"\n"
"A 2-input NAND gate.\n"
"\n"
"Truth table:    A B | Y\n"
"               -----+---\n"
"                0 0 | 1\n"
"                0 1 | 1\n"
"                1 0 | 1\n"
"                1 1 | 0\n"
"\n";
cell_code["$_NAND_+"] = "module \\$_NAND_ (A, B, Y);\n"
"    input A, B;\n"
"    output Y;\n"
"    assign Y = ~(A & B);\n"
"endmodule\n";
cell_help["$_OR_"] = "\n"
"    $_OR_ (A, B, Y)\n"
"\n"
"A 2-input OR gate.\n"
"\n"
"Truth table:    A B | Y\n"
"               -----+---\n"
"                0 0 | 0\n"
"                0 1 | 1\n"
"                1 0 | 1\n"
"                1 1 | 1\n"
"\n";
cell_code["$_OR_+"] = "module \\$_OR_ (A, B, Y);\n"
"    input A, B;\n"
"    output Y;\n"
"    assign Y = A | B;\n"
"endmodule\n";
cell_help["$_NOR_"] = "\n"
"    $_NOR_ (A, B, Y)\n"
"\n"
"A 2-input NOR gate.\n"
"\n"
"Truth table:    A B | Y\n"
"               -----+---\n"
"                0 0 | 1\n"
"                0 1 | 0\n"
"                1 0 | 0\n"
"                1 1 | 0\n"
"\n";
cell_code["$_NOR_+"] = "module \\$_NOR_ (A, B, Y);\n"
"    input A, B;\n"
"    output Y;\n"
"    assign Y = ~(A | B);\n"
"endmodule\n";
cell_help["$_XOR_"] = "\n"
"    $_XOR_ (A, B, Y)\n"
"\n"
"A 2-input XOR gate.\n"
"\n"
"Truth table:    A B | Y\n"
"               -----+---\n"
"                0 0 | 0\n"
"                0 1 | 1\n"
"                1 0 | 1\n"
"                1 1 | 0\n"
"\n";
cell_code["$_XOR_+"] = "module \\$_XOR_ (A, B, Y);\n"
"    input A, B;\n"
"    output Y;\n"
"    assign Y = A ^ B;\n"
"endmodule\n";
cell_help["$_XNOR_"] = "\n"
"    $_XNOR_ (A, B, Y)\n"
"\n"
"A 2-input XNOR gate.\n"
"\n"
"Truth table:    A B | Y\n"
"               -----+---\n"
"                0 0 | 1\n"
"                0 1 | 0\n"
"                1 0 | 0\n"
"                1 1 | 1\n"
"\n";
cell_code["$_XNOR_+"] = "module \\$_XNOR_ (A, B, Y);\n"
"    input A, B;\n"
"    output Y;\n"
"    assign Y = ~(A ^ B);\n"
"endmodule\n";
cell_help["$_MUX_"] = "\n"
"    $_MUX_ (A, B, S, Y)\n"
"\n"
"A 2-input MUX gate.\n"
"\n"
"Truth table:    A B S | Y\n"
"               -------+---\n"
"                a - 0 | a\n"
"                - b 1 | b\n"
"\n";
cell_code["$_MUX_+"] = "module \\$_MUX_ (A, B, S, Y);\n"
"    input A, B, S;\n"
"    output Y;\n"
"    assign Y = S ? B : A;\n"
"endmodule\n";
cell_help["$_MUX4_"] = "\n"
"    $_MUX4_ (A, B, C, D, S, T, Y)\n"
"\n"
"A 4-input MUX gate.\n"
"\n"
"Truth table:    A B C D S T | Y\n"
"               -------------+---\n"
"                a - - - 0 0 | a\n"
"                - b - - 1 0 | b\n"
"                - - c - 0 1 | c\n"
"                - - - d 1 1 | d\n"
"\n";
cell_code["$_MUX4_+"] = "module \\$_MUX4_ (A, B, C, D, S, T, Y);\n"
"    input A, B, C, D, S, T;\n"
"    output Y;\n"
"    assign Y = T ? (S ? D : C) :\n"
"                   (S ? B : A);\n"
"endmodule\n";
cell_help["$_MUX8_"] = "\n"
"    $_MUX8_ (A, B, C, D, E, F, G, H, S, T, U, Y)\n"
"\n"
"An 8-input MUX gate.\n"
"\n"
"Truth table:    A B C D E F G H S T U | Y\n"
"               -----------------------+---\n"
"                a - - - - - - - 0 0 0 | a\n"
"                - b - - - - - - 1 0 0 | b\n"
"                - - c - - - - - 0 1 0 | c\n"
"                - - - d - - - - 1 1 0 | d\n"
"                - - - - e - - - 0 0 1 | e\n"
"                - - - - - f - - 1 0 1 | f\n"
"                - - - - - - g - 0 1 1 | g\n"
"                - - - - - - - h 1 1 1 | h\n"
"\n";
cell_code["$_MUX8_+"] = "module \\$_MUX8_ (A, B, C, D, E, F, G, H, S, T, U, Y);\n"
"    input A, B, C, D, E, F, G, H, S, T, U;\n"
"    output Y;\n"
"    assign Y = U ? T ? (S ? H : G) :\n"
"                       (S ? F : E) :\n"
"                   T ? (S ? D : C) :\n"
"                       (S ? B : A);\n"
"endmodule\n";
cell_help["$_MUX16_"] = "\n"
"    $_MUX16_ (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, S, T, U, V, Y)\n"
"\n"
"A 16-input MUX gate.\n"
"\n"
"Truth table:    A B C D E F G H I J K L M N O P S T U V | Y\n"
"               -----------------------------------------+---\n"
"                a - - - - - - - - - - - - - - - 0 0 0 0 | a\n"
"                - b - - - - - - - - - - - - - - 1 0 0 0 | b\n"
"                - - c - - - - - - - - - - - - - 0 1 0 0 | c\n"
"                - - - d - - - - - - - - - - - - 1 1 0 0 | d\n"
"                - - - - e - - - - - - - - - - - 0 0 1 0 | e\n"
"                - - - - - f - - - - - - - - - - 1 0 1 0 | f\n"
"                - - - - - - g - - - - - - - - - 0 1 1 0 | g\n"
"                - - - - - - - h - - - - - - - - 1 1 1 0 | h\n"
"                - - - - - - - - i - - - - - - - 0 0 0 1 | i\n"
"                - - - - - - - - - j - - - - - - 1 0 0 1 | j\n"
"                - - - - - - - - - - k - - - - - 0 1 0 1 | k\n"
"                - - - - - - - - - - - l - - - - 1 1 0 1 | l\n"
"                - - - - - - - - - - - - m - - - 0 0 1 1 | m\n"
"                - - - - - - - - - - - - - n - - 1 0 1 1 | n\n"
"                - - - - - - - - - - - - - - o - 0 1 1 1 | o\n"
"                - - - - - - - - - - - - - - - p 1 1 1 1 | p\n"
"\n";
cell_code["$_MUX16_+"] = "module \\$_MUX16_ (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, S, T, U, V, Y);\n"
"    input A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, S, T, U, V;\n"
"    output Y;\n"
"    assign Y = V ? U ? T ? (S ? P : O) :\n"
"                           (S ? N : M) :\n"
"                       T ? (S ? L : K) :\n"
"                           (S ? J : I) :\n"
"                   U ? T ? (S ? H : G) :\n"
"                           (S ? F : E) :\n"
"                       T ? (S ? D : C) :\n"
"                           (S ? B : A);\n"
"endmodule\n";
cell_help["$_AOI3_"] = "\n"
"    $_AOI3_ (A, B, C, Y)\n"
"\n"
"A 3-input And-Or-Invert gate.\n"
"\n"
"Truth table:    A B C | Y\n"
"               -------+---\n"
"                0 0 0 | 1\n"
"                0 0 1 | 0\n"
"                0 1 0 | 1\n"
"                0 1 1 | 0\n"
"                1 0 0 | 1\n"
"                1 0 1 | 0\n"
"                1 1 0 | 0\n"
"                1 1 1 | 0\n"
"\n";
cell_code["$_AOI3_+"] = "module \\$_AOI3_ (A, B, C, Y);\n"
"    input A, B, C;\n"
"    output Y;\n"
"    assign Y = ~((A & B) | C);\n"
"endmodule\n";
cell_help["$_OAI3_"] = "\n"
"    $_OAI3_ (A, B, C, Y)\n"
"\n"
"A 3-input Or-And-Invert gate.\n"
"\n"
"Truth table:    A B C | Y\n"
"               -------+---\n"
"                0 0 0 | 1\n"
"                0 0 1 | 1\n"
"                0 1 0 | 1\n"
"                0 1 1 | 0\n"
"                1 0 0 | 1\n"
"                1 0 1 | 0\n"
"                1 1 0 | 1\n"
"                1 1 1 | 0\n"
"\n";
cell_code["$_OAI3_+"] = "module \\$_OAI3_ (A, B, C, Y);\n"
"    input A, B, C;\n"
"    output Y;\n"
"    assign Y = ~((A | B) & C);\n"
"endmodule\n";
cell_help["$_AOI4_"] = "\n"
"    $_AOI4_ (A, B, C, Y)\n"
"\n"
"A 4-input And-Or-Invert gate.\n"
"\n"
"Truth table:    A B C D | Y\n"
"               ---------+---\n"
"                0 0 0 0 | 1\n"
"                0 0 0 1 | 1\n"
"                0 0 1 0 | 1\n"
"                0 0 1 1 | 0\n"
"                0 1 0 0 | 1\n"
"                0 1 0 1 | 1\n"
"                0 1 1 0 | 1\n"
"                0 1 1 1 | 0\n"
"                1 0 0 0 | 1\n"
"                1 0 0 1 | 1\n"
"                1 0 1 0 | 1\n"
"                1 0 1 1 | 0\n"
"                1 1 0 0 | 0\n"
"                1 1 0 1 | 0\n"
"                1 1 1 0 | 0\n"
"                1 1 1 1 | 0\n"
"\n";
cell_code["$_AOI4_+"] = "module \\$_AOI4_ (A, B, C, D, Y);\n"
"    input A, B, C, D;\n"
"    output Y;\n"
"    assign Y = ~((A & B) | (C & D));\n"
"endmodule\n";
cell_help["$_OAI4_"] = "\n"
"    $_OAI4_ (A, B, C, Y)\n"
"\n"
"A 4-input Or-And-Invert gate.\n"
"\n"
"Truth table:    A B C D | Y\n"
"               ---------+---\n"
"                0 0 0 0 | 1\n"
"                0 0 0 1 | 1\n"
"                0 0 1 0 | 1\n"
"                0 0 1 1 | 1\n"
"                0 1 0 0 | 1\n"
"                0 1 0 1 | 0\n"
"                0 1 1 0 | 0\n"
"                0 1 1 1 | 0\n"
"                1 0 0 0 | 1\n"
"                1 0 0 1 | 0\n"
"                1 0 1 0 | 0\n"
"                1 0 1 1 | 0\n"
"                1 1 0 0 | 1\n"
"                1 1 0 1 | 0\n"
"                1 1 1 0 | 0\n"
"                1 1 1 1 | 0\n"
"\n";
cell_code["$_OAI4_+"] = "module \\$_OAI4_ (A, B, C, D, Y);\n"
"    input A, B, C, D;\n"
"    output Y;\n"
"    assign Y = ~((A | B) & (C | D));\n"
"endmodule\n";
cell_help["$_TBUF_"] = "\n"
"    $_TBUF_ (A, E, Y)\n"
"\n"
"A tri-state buffer.\n"
"\n"
"Truth table:    A E | Y\n"
"               -----+---\n"
"                a 1 | a\n"
"                - 0 | z\n"
"\n";
cell_code["$_TBUF_+"] = "module \\$_TBUF_ (A, E, Y);\n"
"    input A, E;\n"
"    output Y;\n"
"    assign Y = E ? A : 1'bz;\n"
"endmodule\n";
cell_help["$_SR_NN_"] = "\n"
"    $_SR_NN_ (S, R, Q)\n"
"\n"
"A set-reset latch with negative polarity SET and RESET.\n"
"\n"
"Truth table:    S R | Q\n"
"               -----+---\n"
"                0 0 | x\n"
"                0 1 | 1\n"
"                1 0 | 0\n"
"                1 1 | y\n"
"\n";
cell_code["$_SR_NN_+"] = "module \\$_SR_NN_ (S, R, Q);\n"
"    input S, R;\n"
"    output reg Q;\n"
"    always @(negedge S, negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"    end\n"
"endmodule\n";
cell_help["$_SR_NP_"] = "\n"
"    $_SR_NP_ (S, R, Q)\n"
"\n"
"A set-reset latch with negative polarity SET and positive polarioty RESET.\n"
"\n"
"Truth table:    S R | Q\n"
"               -----+---\n"
"                0 1 | x\n"
"                0 0 | 1\n"
"                1 1 | 0\n"
"                1 0 | y\n"
"\n";
cell_code["$_SR_NP_+"] = "module \\$_SR_NP_ (S, R, Q);\n"
"    input S, R;\n"
"    output reg Q;\n"
"    always @(negedge S, posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"    end\n"
"endmodule\n";
cell_help["$_SR_PN_"] = "\n"
"    $_SR_PN_ (S, R, Q)\n"
"\n"
"A set-reset latch with positive polarity SET and negative polarioty RESET.\n"
"\n"
"Truth table:    S R | Q\n"
"               -----+---\n"
"                1 0 | x\n"
"                1 1 | 1\n"
"                0 0 | 0\n"
"                0 1 | y\n"
"\n";
cell_code["$_SR_PN_+"] = "module \\$_SR_PN_ (S, R, Q);\n"
"    input S, R;\n"
"    output reg Q;\n"
"    always @(posedge S, negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"    end\n"
"endmodule\n";
cell_help["$_SR_PP_"] = "\n"
"    $_SR_PP_ (S, R, Q)\n"
"\n"
"A set-reset latch with positive polarity SET and RESET.\n"
"\n"
"Truth table:    S R | Q\n"
"               -----+---\n"
"                1 1 | x\n"
"                1 0 | 1\n"
"                0 1 | 0\n"
"                0 0 | y\n"
"\n";
cell_code["$_SR_PP_+"] = "module \\$_SR_PP_ (S, R, Q);\n"
"    input S, R;\n"
"    output reg Q;\n"
"    always @(posedge S, posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"    end\n"
"endmodule\n";
cell_help["$_FF_"] = "\n"
"    $_FF_ (D, Q)\n"
"\n"
"A D-type flip-flop that is clocked from the implicit global clock. (This cell\n"
"type is usually only used in netlists for formal verification.)\n"
"\n";
cell_code["$_FF_+"] = "module \\$_FF_ (D, Q);\n"
"    input D;\n"
"    output reg Q;\n"
"    always @($global_clock) begin\n"
"        Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_N_"] = "\n"
"    $_DFF_N_ (D, C, Q)\n"
"\n"
"A negative edge D-type flip-flop.\n"
"\n"
"Truth table:    D C | Q\n"
"               -----+---\n"
"                d \\ | d\n"
"                - - | q\n"
"\n";
cell_code["$_DFF_N_+"] = "module \\$_DFF_N_ (D, C, Q);\n"
"    input D, C;\n"
"    output reg Q;\n"
"    always @(negedge C) begin\n"
"        Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_P_"] = "\n"
"    $_DFF_P_ (D, C, Q)\n"
"\n"
"A positive edge D-type flip-flop.\n"
"\n"
"Truth table:    D C | Q\n"
"               -----+---\n"
"                d / | d\n"
"                - - | q\n"
"\n";
cell_code["$_DFF_P_+"] = "module \\$_DFF_P_ (D, C, Q);\n"
"    input D, C;\n"
"    output reg Q;\n"
"    always @(posedge C) begin\n"
"        Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFE_NN_"] = "\n"
"    $_DFFE_NN_ (D, C, E, Q)\n"
"\n"
"A negative edge D-type flip-flop with negative polarity enable.\n"
"\n"
"Truth table:    D C E | Q\n"
"               -------+---\n"
"                d \\ 0 | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFFE_NN_+"] = "module \\$_DFFE_NN_ (D, C, E, Q);\n"
"    input D, C, E;\n"
"    output reg Q;\n"
"    always @(negedge C) begin\n"
"        if (!E) Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFE_NP_"] = "\n"
"    $_DFFE_NP_ (D, C, E, Q)\n"
"\n"
"A negative edge D-type flip-flop with positive polarity enable.\n"
"\n"
"Truth table:    D C E | Q\n"
"               -------+---\n"
"                d \\ 1 | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFFE_NP_+"] = "module \\$_DFFE_NP_ (D, C, E, Q);\n"
"    input D, C, E;\n"
"    output reg Q;\n"
"    always @(negedge C) begin\n"
"        if (E) Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFE_PN_"] = "\n"
"    $_DFFE_PN_ (D, C, E, Q)\n"
"\n"
"A positive edge D-type flip-flop with negative polarity enable.\n"
"\n"
"Truth table:    D C E | Q\n"
"               -------+---\n"
"                d / 0 | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFFE_PN_+"] = "module \\$_DFFE_PN_ (D, C, E, Q);\n"
"    input D, C, E;\n"
"    output reg Q;\n"
"    always @(posedge C) begin\n"
"        if (!E) Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFE_PP_"] = "\n"
"    $_DFFE_PP_ (D, C, E, Q)\n"
"\n"
"A positive edge D-type flip-flop with positive polarity enable.\n"
"\n"
"Truth table:    D C E | Q\n"
"               -------+---\n"
"                d / 1 | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFFE_PP_+"] = "module \\$_DFFE_PP_ (D, C, E, Q);\n"
"    input D, C, E;\n"
"    output reg Q;\n"
"    always @(posedge C) begin\n"
"        if (E) Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_NN0_"] = "\n"
"    $_DFF_NN0_ (D, C, R, Q)\n"
"\n"
"A negative edge D-type flip-flop with negative polarity reset.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 0 | 0\n"
"                d \\ - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_NN0_+"] = "module \\$_DFF_NN0_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(negedge C or negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_NN1_"] = "\n"
"    $_DFF_NN1_ (D, C, R, Q)\n"
"\n"
"A negative edge D-type flip-flop with negative polarity set.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 0 | 1\n"
"                d \\ - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_NN1_+"] = "module \\$_DFF_NN1_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(negedge C or negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_NP0_"] = "\n"
"    $_DFF_NP0_ (D, C, R, Q)\n"
"\n"
"A negative edge D-type flip-flop with positive polarity reset.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 1 | 0\n"
"                d \\ - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_NP0_+"] = "module \\$_DFF_NP0_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(negedge C or posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_NP1_"] = "\n"
"    $_DFF_NP1_ (D, C, R, Q)\n"
"\n"
"A negative edge D-type flip-flop with positive polarity set.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 1 | 1\n"
"                d \\ - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_NP1_+"] = "module \\$_DFF_NP1_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(negedge C or posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_PN0_"] = "\n"
"    $_DFF_PN0_ (D, C, R, Q)\n"
"\n"
"A positive edge D-type flip-flop with negative polarity reset.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 0 | 0\n"
"                d / - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_PN0_+"] = "module \\$_DFF_PN0_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(posedge C or negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_PN1_"] = "\n"
"    $_DFF_PN1_ (D, C, R, Q)\n"
"\n"
"A positive edge D-type flip-flop with negative polarity set.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 0 | 1\n"
"                d / - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_PN1_+"] = "module \\$_DFF_PN1_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(posedge C or negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_PP0_"] = "\n"
"    $_DFF_PP0_ (D, C, R, Q)\n"
"\n"
"A positive edge D-type flip-flop with positive polarity reset.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 1 | 0\n"
"                d / - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_PP0_+"] = "module \\$_DFF_PP0_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(posedge C or posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFF_PP1_"] = "\n"
"    $_DFF_PP1_ (D, C, R, Q)\n"
"\n"
"A positive edge D-type flip-flop with positive polarity set.\n"
"\n"
"Truth table:    D C R | Q\n"
"               -------+---\n"
"                - - 1 | 1\n"
"                d / - | d\n"
"                - - - | q\n"
"\n";
cell_code["$_DFF_PP1_+"] = "module \\$_DFF_PP1_ (D, C, R, Q);\n"
"    input D, C, R;\n"
"    output reg Q;\n"
"    always @(posedge C or posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_NNN_"] = "\n"
"    $_DFFSR_NNN_ (C, S, R, D, Q)\n"
"\n"
"A negative edge D-type flip-flop with negative polarity set and reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 0 - - | 1\n"
"                \\ - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_NNN_+"] = "module \\$_DFFSR_NNN_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(negedge C, negedge S, negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_NNP_"] = "\n"
"    $_DFFSR_NNP_ (C, S, R, D, Q)\n"
"\n"
"A negative edge D-type flip-flop with negative polarity set and positive\n"
"polarity reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 0 - - | 1\n"
"                \\ - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_NNP_+"] = "module \\$_DFFSR_NNP_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(negedge C, negedge S, posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_NPN_"] = "\n"
"    $_DFFSR_NPN_ (C, S, R, D, Q)\n"
"\n"
"A negative edge D-type flip-flop with positive polarity set and negative\n"
"polarity reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 1 - - | 1\n"
"                \\ - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_NPN_+"] = "module \\$_DFFSR_NPN_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(negedge C, posedge S, negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_NPP_"] = "\n"
"    $_DFFSR_NPP_ (C, S, R, D, Q)\n"
"\n"
"A negative edge D-type flip-flop with positive polarity set and reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 1 - - | 1\n"
"                \\ - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_NPP_+"] = "module \\$_DFFSR_NPP_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(negedge C, posedge S, posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_PNN_"] = "\n"
"    $_DFFSR_PNN_ (C, S, R, D, Q)\n"
"\n"
"A positive edge D-type flip-flop with negative polarity set and reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 0 - - | 1\n"
"                / - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_PNN_+"] = "module \\$_DFFSR_PNN_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(posedge C, negedge S, negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_PNP_"] = "\n"
"    $_DFFSR_PNP_ (C, S, R, D, Q)\n"
"\n"
"A positive edge D-type flip-flop with negative polarity set and positive\n"
"polarity reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 0 - - | 1\n"
"                / - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_PNP_+"] = "module \\$_DFFSR_PNP_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(posedge C, negedge S, posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_PPN_"] = "\n"
"    $_DFFSR_PPN_ (C, S, R, D, Q)\n"
"\n"
"A positive edge D-type flip-flop with positive polarity set and negative\n"
"polarity reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 1 - - | 1\n"
"                / - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_PPN_+"] = "module \\$_DFFSR_PPN_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(posedge C, posedge S, negedge R) begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DFFSR_PPP_"] = "\n"
"    $_DFFSR_PPP_ (C, S, R, D, Q)\n"
"\n"
"A positive edge D-type flip-flop with positive polarity set and reset.\n"
"\n"
"Truth table:    C S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 1 - - | 1\n"
"                / - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DFFSR_PPP_+"] = "module \\$_DFFSR_PPP_ (C, S, R, D, Q);\n"
"    input C, S, R, D;\n"
"    output reg Q;\n"
"    always @(posedge C, posedge S, posedge R) begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCH_N_"] = "\n"
"    $_DLATCH_N_ (E, D, Q)\n"
"\n"
"A negative enable D-type latch.\n"
"\n"
"Truth table:    E D | Q\n"
"               -----+---\n"
"                0 d | d\n"
"                - - | q\n"
"\n";
cell_code["$_DLATCH_N_+"] = "module \\$_DLATCH_N_ (E, D, Q);\n"
"    input E, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (E == 0)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCH_P_"] = "\n"
"    $_DLATCH_P_ (E, D, Q)\n"
"\n"
"A positive enable D-type latch.\n"
"\n"
"Truth table:    E D | Q\n"
"               -----+---\n"
"                1 d | d\n"
"                - - | q\n"
"\n";
cell_code["$_DLATCH_P_+"] = "module \\$_DLATCH_P_ (E, D, Q);\n"
"    input E, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (E == 1)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_NNN_"] = "\n"
"    $_DLATCHSR_NNN_ (E, S, R, D, Q)\n"
"\n"
"A negative enable D-type latch with negative polarity set and reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 0 - - | 1\n"
"                0 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_NNN_+"] = "module \\$_DLATCHSR_NNN_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else if (E == 0)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_NNP_"] = "\n"
"    $_DLATCHSR_NNP_ (E, S, R, D, Q)\n"
"\n"
"A negative enable D-type latch with negative polarity set and positive polarity\n"
"reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 0 - - | 1\n"
"                0 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_NNP_+"] = "module \\$_DLATCHSR_NNP_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else if (E == 0)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_NPN_"] = "\n"
"    $_DLATCHSR_NPN_ (E, S, R, D, Q)\n"
"\n"
"A negative enable D-type latch with positive polarity set and negative polarity\n"
"reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 1 - - | 1\n"
"                0 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_NPN_+"] = "module \\$_DLATCHSR_NPN_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else if (E == 0)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_NPP_"] = "\n"
"    $_DLATCHSR_NPP_ (E, S, R, D, Q)\n"
"\n"
"A negative enable D-type latch with positive polarity set and reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 1 - - | 1\n"
"                0 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_NPP_+"] = "module \\$_DLATCHSR_NPP_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else if (E == 0)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_PNN_"] = "\n"
"    $_DLATCHSR_PNN_ (E, S, R, D, Q)\n"
"\n"
"A positive enable D-type latch with negative polarity set and reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 0 - - | 1\n"
"                1 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_PNN_+"] = "module \\$_DLATCHSR_PNN_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else if (E == 1)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_PNP_"] = "\n"
"    $_DLATCHSR_PNP_ (E, S, R, D, Q)\n"
"\n"
"A positive enable D-type latch with negative polarity set and positive polarity\n"
"reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 0 - - | 1\n"
"                1 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_PNP_+"] = "module \\$_DLATCHSR_PNP_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 0)\n"
"            Q <= 1;\n"
"        else if (E == 1)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_PPN_"] = "\n"
"    $_DLATCHSR_PPN_ (E, S, R, D, Q)\n"
"\n"
"A positive enable D-type latch with positive polarity set and negative polarity\n"
"reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 0 - | 0\n"
"                - 1 - - | 1\n"
"                1 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_PPN_+"] = "module \\$_DLATCHSR_PPN_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 0)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else if (E == 1)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
cell_help["$_DLATCHSR_PPP_"] = "\n"
"    $_DLATCHSR_PPP_ (E, S, R, D, Q)\n"
"\n"
"A positive enable D-type latch with positive polarity set and reset.\n"
"\n"
"Truth table:    E S R D | Q\n"
"               ---------+---\n"
"                - - 1 - | 0\n"
"                - 1 - - | 1\n"
"                1 - - d | d\n"
"                - - - - | q\n"
"\n";
cell_code["$_DLATCHSR_PPP_+"] = "module \\$_DLATCHSR_PPP_ (E, S, R, D, Q);\n"
"    input E, S, R, D;\n"
"    output reg Q;\n"
"    always @* begin\n"
"        if (R == 1)\n"
"            Q <= 0;\n"
"        else if (S == 1)\n"
"            Q <= 1;\n"
"        else if (E == 1)\n"
"            Q <= D;\n"
"    end\n"
"endmodule\n";
